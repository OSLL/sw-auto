@using AnalyzeResults.Errors
@using AnalyzeResults.Presentation
@using Microsoft.EntityFrameworkCore.Infrastructure
@model Tuple<AnalyzeResults.Presentation.PaperAnalysisResult, MLSAnalysisWrapper.MLSAnalysisResult>

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section Scripts {
    <script>
        $(document).ready(function () {
            LoadResults();
        });
    </script>
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Результаты проверки</title>

</head>
<body>
    <div style="text-align:center; color:burlywood; padding:5px; background-color:darkslategray">
        @if (Model.Item2 == null && Model.Item1.Criteria.Find(e => e.IsPlaceholder) != null && Model.Item1.Errors.Find(e => e.IsPlaceholder) != null)
        {
        <span>Пожалуйста, вернитесь через несколько минут для получения полной оценки и дополнительной информации, ваша статья находится в процессе дополнительного изучения.</span>
        }
    </div>
    <div class="main-container">
        @if (string.IsNullOrEmpty(Model.Item1.Error))
        {
            <div class="results-container">
                <div class="grade-container">
                    @*
                        90-100 perfect (green)
                        70-89 good (lightgreen)
                        55-69 meh (yellow)
                        40-54 bad (orange)
                        0-39 awful (red)
                    *@
                    <div class="grade-title">
                        Оценка стиля статьи:
                    </div>
                    <div class="grade-value-container">
                        <div class="grade-value @(Model.Item1.GetPaperGrade() > 0.9*@Model.Item1.MaxScore
                                                    ? "grade-perfect"
                                                    : Model.Item1.GetPaperGrade() > 0.7*@Model.Item1.MaxScore
                                                        ? "grade-good"
                                                        : Model.Item1.GetPaperGrade() > 0.55*@Model.Item1.MaxScore
                                                            ? "grade-meh"
                                                            : Model.Item1.GetPaperGrade() > 0.4*@Model.Item1.MaxScore
                                                                ? "grade-bad"
                                                                : "grade-awful")">
                            @Model.Item1.GetPaperGrade()
                        </div>
                        <div class="grade-label">
                            из @Model.Item1.MaxScore
                        </div>
                    </div>
                </div>
                <div class="criteria-title">
                    Критерии:
                </div>
                <div class="criteria-container">
                    <div class="criteria-header">
                        <div class="criteria-name">Проведенные проверки:</div>
                    </div>
                    <div class="criteria-data">
                        @foreach (Criterion crit in Model.Item1.Criteria.Where(x => (x as Criterion)?.Factor > 0))
                        {
                            if (crit.Name == "Качество ключевых слов" && (crit as NumericalCriterion).Value < 0)
                            {
                                <div class="criteria-data-row criterion-value">
                                    @crit.Name: Ожидание сервиса MLS-Analysis
                                </div>
                            }
                            else
                            {
                                var @res = @crit.IsMet() ? @crit.Factor : 0;
                                <div class="criteria-data-row criterion-value">
                                    @crit.Name : Набрано @Math.Round(@res, 2) из @Math.Round(@crit.Factor, 2) баллов
                                </div>
                            }
                        }
                        @foreach (var error in Enum.GetValues(typeof(ErrorType)))
                        {
                            var specialError = @Model.Item1.Errors.FirstOrDefault(e => e.ErrorType == (ErrorType)error);
                            if (@specialError != null && @specialError.Weight > 0)
                            {
                                if (specialError.IsPlaceholder)
                                {
                                    <div class="criteria-data-row criterion-value">
                                        <span>
                                            @specialError.Name : Ожидание сервиса MLS-Analysis
                                        </span>
                                    </div>
                                }
                                else
                                {
                                    var @res = @Model.Item1.GetSpecialGrade((ErrorType)error);
                                    <div class="criteria-data-row criterion-value">
                                        @if (specialError.ErrorCost >= 0)
                                        {
                                            <span>
                                                @specialError.Name : Набрано @Math.Round(res, 2) из @Math.Round(@specialError.Weight, 2) баллов
                                            </span>
                                        }
                                        else
                                        {
                                            <span>
                                                @specialError.Name : Набрано @Math.Round(@specialError.Weight, 2) из @Math.Round(@specialError.Weight, 2) баллов
                                            </span>
                                        }
                                    </div>
                                }
                            }
                        }
                    </div>
                </div>
                @foreach (Criterion crit in Model.Item1.Criteria.Where(x => (x as Criterion)?.Factor > 0))
                {
                    <div class="criteria-container">
                        <div class="criteria-header">
                            <div class="criteria-name">
                                @crit.Name
                            </div>
                            @if (crit.IsMet())
                            {
                                <div class="criteria-status criteria-status-good" title="Значение критерия удовлетворяет требованиям">
                                    <div class="success success--big"></div>
                                </div>
                            }
                            else
                            {
                                <div class="criteria-status criteria-status-bad" title="Значение критерия НЕ удовлетворяет требованиям">
                                    <div class="fail fail--big"></div>
                                </div>
                            }
                        </div>
                        <div class="criteria-data">
                            @if (crit.IsPlaceholder)
                            {
                                <div class="criteria-data-row criterion-value">
                                    Ожидание сервиса MLS-Analysis
                                </div>
                            }
                            else
                            {
                                <div class="criteria-data-row criteria-description">
                                    @crit.Description
                                </div>
                                <div class="criteria-data-row criterion-value">
                                    <span class="data-label">Значение: </span><span class="data-value">@crit.GetStringValue()</span>
                                </div>
                                <div class="criteria-data-row">
                                    <span class="data-label">Требования: </span><span class="data-value">@crit.GetStringRequirements()</span>
                                </div>
                                @if (crit.IsMet())
                                {
                                    <div class="criteria-data-row criterion-value">
                                        <span class="data-label">Набрано @Math.Round(@crit.Factor, 2) баллов </span>
                                    </div>
                                }
                                else
                                {
                                    <div class="criteria-data-row criterion-value">
                                        <span class="data-label">Набрано 0 баллов </span>
                                    </div>
                                }
                                @if (!crit.IsMet())
                                {
                                    <div class="criteria-data-row">
                                        <span class="data-label">Совет: </span><span class="data-value">@crit.GetAdvice()</span>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                }
            </div>
            <div class="paper-container">
                @for (int sectIndex = 0; sectIndex < Model.Item1.Sections.Count; sectIndex++)
                {
                    Section sect = Model.Item1.Sections[sectIndex];

                    @*@foreach (var sect in Model.Item1.Sections)
                        {*@
                    @*<span>Section start</span>*@
                    @switch (sect.Type)
                    {
                        case AnalyzeResults.Presentation.SectionType.PaperTitle:
                            <div>
                                <div class="paper-title">

                                    @foreach (string word in Model.Item1.PaperTitle.Split(' '))
                                    {
                                        @if (word.Length > 2)
                                        {
                                            <a class="papername-word" wordIds="@(Model.Item1.PaperTitleRefs.ContainsKey(word.Trim().ToLower()) ? String.Join(',', Model.Item1.PaperTitleRefs[word.Trim().ToLower()]) :"")" href="#">
                                                @word
                                            </a>
                                        }
                                        else if (word.Length > 1 && word.ToUpper() == word)

                                        {
                                            // for Abbreviation and Acronym
                                            <a class="papername-word" wordIds="@(Model.Item1.PaperTitleRefs.ContainsKey(word.Trim()) ? String.Join(',', Model.Item1.PaperTitleRefs[word.Trim()]) : "")" href="#">
                                                @word
                                            </a>
                                        }
                                        else
                                        {
                                            <span class="papername-word">
                                                @word
                                            </span>
                                        }
                                    }
                                    @*@Html.Raw(sect.ToStringVersion())*@
                                </div>
                            </div>
                            break;
                        case AnalyzeResults.Presentation.SectionType.SectionTitle:
                            <div>
                                <div class="section-title @(sect.HasErrors && Model.Item1.Errors.FirstOrDefault(e => e.ErrorType == ErrorType.ShortSection)?.Weight > 0 ? "section-error" : "")" sectId="@sect.Id" id="err_@sect.Id" errors="@((int)AnalyzeResults.Errors.ErrorType.ShortSection)">
                                    @Html.Raw(sect.ToStringVersion())
                                </div>
                            </div>
                            break;
                        case AnalyzeResults.Presentation.SectionType.ReferencesList:
                            <div class="reference-list">
                                @foreach (var reference in sect.References)
                                {
                                    <span class="reference @(reference.ReferedTo || Model.Item1.Errors.FirstOrDefault(e => e.ErrorType == ErrorType.SourceNotReferenced)?.Weight <= 0 ? "" : "ref-error")" number="@reference.Number" id="ref_@reference.Number" errors="@((int)AnalyzeResults.Errors.ErrorType.SourceNotReferenced)">
                                        @reference.Original.ToStringVersion()
                                        @if (@Model.Item1.Errors.FirstOrDefault(e => e.ErrorType == ErrorType.SourceNotReferenced)?.Weight > 0)
                                        {
                                            @if (reference.ReferedTo)
                                            {
                                                <span class="referenced">Есть ссылка в статье</span>
                                            }
                                            else
                                            {
                                                <span class="not-referenced">Нет ссылки в статье</span>
                                            }
                                            @if (reference.Year != 0 && reference.Year < 1990)
                                            {
                                                <span class="old-source">Устаревший источник</span>
                                            }
                                        }
                                    </span><br />
                                }
                            </div>
                            break;
                        case AnalyzeResults.Presentation.SectionType.Text:
                        default:
                            <div>
                                @for (int sentIndex = 0; sentIndex < sect.Sentences.Count; sentIndex++)
                                {
                                    Sentence sent = sect.Sentences[sentIndex];
                                    @*@foreach (var sent in sect.Sentences)
                                        {*@
                                    <span sentId="@sent.SentenceIndex">
                                        @*<span>(@sent.SentenceIndex count @sent.Words.Count @Model.Item2?.Coherence?[sectIndex]?.IncoherentSentences?[sentIndex] @(sentIndex<sect.Sentences.Count-1?Model.Item2?.Coherence?[sectIndex]?.MissingSentences?[sentIndex].ToString():""))</span>*@
                                        @foreach (var word in sent.Words)
                                        {
                                            <span wordId="@word.StartIndex" id="@word.StartIndex" class="word @(word.HasErrors ? "word-error" : "")" errors="@word.ErrorCodes">
                                                @word.Original
                                            </span>
                                        }
                                    </span>
                                }
                            </div>
                            break;
                    }

                }
            </div>

            <div class="errors-container">
                @if (Model.Item1.Keywords.Count > 0)
                {
                    <div class="keywords-container">
                        <button class="keywords-collapsible">
                            <div class="keyword-button-container">
                                <div class="keyword-button-name">
                                    Ключевые слова
                                </div>
                            </div>
                        </button>
                        <div class="keywords-content">
                            <div class="keywords-content-collapsible">
                                @foreach (KeyValuePair<string, List<int>> keyword in Model.Item1.Keywords)
                                {
                                    <a class="keyword-container" wordIds="@String.Join(',', keyword.Value)" href="#">
                                        <div class="criteria-data-row italic">
                                            @keyword.Key @Model.Item2?.UserPhrases?.Find(e => e.Text == keyword.Key)?.Score.ToString("0.00")
                                        </div>
                                    </a>
                                }
                            </div>
                        </div>
                    </div>
                }
                @if (Model.Item2?.KeywordCandidates?.Count > 0)
                {
                    <div class="keywords-container">
                        <button class="keywords-collapsible">
                            <div class="keyword-button-container">
                                <div class="keyword-button-name">
                                    Кандидаты ключевых слов
                                </div>
                            </div>
                        </button>
                        <div class="keywords-content">
                            <div class="keywords-content-collapsible">
                                @foreach (var entry in Model.Item2.KeywordCandidates)
                                {
                                    <a class="keyword-container" href="#">
                                        <div class="criteria-data-row italic">
                                            @entry.Text @entry.Score.ToString("0.00")
                                        </div>
                                    </a>
                                }
                            </div>
                        </div>
                    </div>
                }
                @foreach (ErrorType errorType in Enum.GetValues(typeof(ErrorType)))
                {
                    @if (Model.Item1.Errors.Any(x => x.ErrorType == errorType) && Model.Item1.Errors.FirstOrDefault(x => x.ErrorType == errorType)?.Weight > 0)
                    {
                        var @specifiedError = @Model.Item1.Errors.First(x => x.ErrorType == errorType);
                        <div class="error-type-container">
                            <button class="errors-collapsible" errorcode="@((int)specifiedError.ErrorType)">
                                <div class="error-button-container">
                                    <div class="error-button-name">
                                        @Model.Item1.Errors.First(x => x.ErrorType == errorType).Name
                                    </div>
                                    @if (specifiedError.IsPlaceholder)
                                    {
                                        //these 2 errors required external service to populate, so with default value, a message should show
                                        <span>Ожидание сервиса MLS-Analysis</span>
                                    }
                                    else
                                    {
                                        <div class="error-button-name">

                                            @if (@specifiedError.ErrorCost >= 0)
                                            {
                                                <span>Набрано @Math.Round(@Model.Item1.GetSpecialGrade(errorType), 2) из @Math.Round(@specifiedError.Weight, 2) возможных баллов</span>
                                            }
                                            else
                                            {
                                                <span>Набрано @Math.Round(@specifiedError.Weight, 2) из @Math.Round(@specifiedError.Weight, 2) возможных баллов</span>
                                            }
                                        </div>
                                        <div class="error-button-data">
                                            <div class="error-button-data-row italic">
                                                <span class="data-label">Найдено ошибок: </span>
                                                @Model.Item1.Errors.Count(x => x.ErrorType == errorType && x.ErrorCost >= 0)
                                            </div>
                                        </div>
                                        <div class="error-button-data">
                                            <div class="error-button-data-row">
                                                @specifiedError.Tip
                                            </div>
                                        </div>
                                    }
                                </div>
                            </button>
                            @if (@specifiedError.ErrorCost >= 0)
                            {
                                switch (errorType)
                                {
                                    case ErrorType.UseOfPersonalPronouns:
                                        {
                                            <div class="errors-content" errorcode="@((int)specifiedError.ErrorType)">
                                                <div class="errors-content-collapsible">
                                                    @foreach (var error1 in Model.Item1.Errors.Where(x => x.ErrorType == ErrorType.UseOfPersonalPronouns))
                                                    {
                                                        var error = (UseOfPersonalPronounsError)error1;
                                                        <a class="error-container" wordId="@error.ErrorWord.StartIndex" href="#@error.ErrorWord.StartIndex">
                                                            <div class="criteria-data-row italic">
                                                                @error.ErrorWord.Original
                                                            </div>
                                                        </a>
                                                    }
                                                </div>
                                            </div>
                                        }
                                        break;
                                    case ErrorType.UseOfForbiddenWord:
                                        {
                                            <div class="errors-content" errorcode="@((int)Model.Item1.Errors.First(x => x.ErrorType == AnalyzeResults.Errors.ErrorType.UseOfForbiddenWord).ErrorType)">
                                                <div class="errors-content-collapsible">
                                                    @foreach (AnalyzeResults.Errors.UseOfForbiddenWordsError error in Model.Item1.Errors.Where(x => x.ErrorType == AnalyzeResults.Errors.ErrorType.UseOfForbiddenWord))
                                                    {
                                                        <a class="error-container" wordId="@error.ErrorWord.StartIndex" href="#@error.ErrorWord.StartIndex">
                                                            <div class="criteria-data-row italic">
                                                                '@error.ErrorWord.Original' из словаря <b>@error.DictionaryName</b>
                                                            </div>
                                                        </a>
                                                    }
                                                </div>
                                            </div>
                                        }
                                        break;
                                    case ErrorType.SourceNotReferenced:
                                        {
                                            <div class="errors-content" errorcode="@((int)Model.Item1.Errors.First(x => x.ErrorType == AnalyzeResults.Errors.ErrorType.SourceNotReferenced).ErrorType)">
                                                <div class="errors-content-collapsible">
                                                    @foreach (AnalyzeResults.Errors.SourceNotReferencedError error in Model.Item1.Errors.Where(x => x.ErrorType == AnalyzeResults.Errors.ErrorType.SourceNotReferenced))
                                                    {
                                                        <a class="error-container" refnum="@error.Number" href="#ref_@error.Number">
                                                            <div class="criteria-data-row italic">
                                                                @error.Explanation
                                                            </div>
                                                        </a>
                                                    }
                                                </div>
                                            </div>
                                        }
                                        break;
                                    case ErrorType.PictureNotReferenced:
                                        {
                                            <div class="errors-content" errorcode="@((int)Model.Item1.Errors.First(x => x.ErrorType == AnalyzeResults.Errors.ErrorType.PictureNotReferenced).ErrorType)">
                                                <div class="errors-content-collapsible">
                                                    @foreach (AnalyzeResults.Errors.PictureNotReferencedError error in Model.Item1.Errors.Where(x => x.ErrorType == AnalyzeResults.Errors.ErrorType.PictureNotReferenced))
                                                    {
                                                        <a class="error-container">
                                                            <div class="criteria-data-row italic">
                                                                @error.Explanation
                                                            </div>
                                                        </a>
                                                    }
                                                </div>
                                            </div>
                                        }
                                        break;
                                    case ErrorType.TableNotReferenced:
                                        {
                                            <div class="errors-content" errorcode="@((int)Model.Item1.Errors.First(x => x.ErrorType == AnalyzeResults.Errors.ErrorType.TableNotReferenced).ErrorType)">
                                                <div class="errors-content-collapsible">
                                                    @foreach (AnalyzeResults.Errors.TableNotReferencedError error in Model.Item1.Errors.Where(x => x.ErrorType == AnalyzeResults.Errors.ErrorType.TableNotReferenced))
                                                    {
                                                        <a class="error-container">
                                                            <div class="criteria-data-row italic">
                                                                @error.Explanation
                                                            </div>
                                                        </a>
                                                    }
                                                </div>
                                            </div>
                                        }
                                        break;
                                    case ErrorType.ShortSection:
                                        {
                                            <div class="errors-content" errorcode="@((int)Model.Item1.Errors.First(x => x.ErrorType == AnalyzeResults.Errors.ErrorType.ShortSection).ErrorType)">
                                                <div class="errors-content-collapsible">
                                                    @foreach (AnalyzeResults.Errors.ShortSectionError error in Model.Item1.Errors.Where(x => x.ErrorType == AnalyzeResults.Errors.ErrorType.ShortSection))
                                                    {
                                                        <a class="error-container" sectId="@error.SectionId" href="#err_@error.SectionId">
                                                            <div class="criteria-data-row italic">
                                                                @error.Explanation
                                                            </div>
                                                        </a>
                                                    }
                                                </div>
                                            </div>
                                        }
                                        break;
                                    case ErrorType.DiscordantSentence:
                                        {
                                            <div class="errors-content" errorcode="@((int)Model.Item1.Errors.First(x => x.ErrorType == AnalyzeResults.Errors.ErrorType.DiscordantSentence).ErrorType)">
                                                @if ((specifiedError as DiscordantSentenceError).ErrorSentence != null)
                                                {
                                                    <div class="errors-content-collapsible">
                                                        @foreach (AnalyzeResults.Errors.DiscordantSentenceError error in Model.Item1.Errors.Where(x => x.ErrorType == AnalyzeResults.Errors.ErrorType.DiscordantSentence && x.ErrorCost >= 0))
                                                        {
                                                            <a class="error-container" sentId="@error.ErrorSentence.SentenceIndex" href="#senterr_@error.ErrorSentence.SentenceIndex">
                                                                @*TODO: add identifier for sentence and implement UI for highlighting sentence*@
                                                                <div class="criteria-data-row italic">
                                                                    @error.Explanation
                                                                </div>
                                                            </a>
                                                        }
                                                    </div>
                                                }
                                            </div>
                                        }
                                        break;
                                    case ErrorType.MissingSentence:
                                        {
                                            <div class="errors-content" errorcode="@((int)Model.Item1.Errors.First(x => x.ErrorType == AnalyzeResults.Errors.ErrorType.MissingSentence).ErrorType)">
                                                @if ((specifiedError as MissingSentenceError).ErrorSentence != null)
                                                {
                                                    <div class="errors-content-collapsible">
                                                        @foreach (AnalyzeResults.Errors.MissingSentenceError error in Model.Item1.Errors.Where(x => x.ErrorType == AnalyzeResults.Errors.ErrorType.MissingSentence && x.ErrorCost >= 0))
                                                        {
                                                            <a class="error-container" sentId="@error.ErrorSentence.SentenceIndex" href="#senterr_@error.ErrorSentence.SentenceIndex">
                                                                <div class="criteria-data-row italic">
                                                                    @error.Explanation
                                                                </div>
                                                            </a>
                                                        }
                                                    </div>
                                                }
                                            </div>
                                        }
                                        break;
                                }
                            }

                        </div>
                    }

                }
            </div>
        }
        else
        {
            <div>
                @Model.Item1.Error
            </div>
        }
    </div>
</body>
</html>
